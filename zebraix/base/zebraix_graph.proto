// Copyright 2022 The Google Research Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package zebraix_proto;

option cc_api_version = 2;

// Also used for label positions, but is more specific, so automatic positions
// are found from specified anchors, not vice versa.
enum LabelAnchor {
  ANCHOR_AUTO = 0;
  T = 1;
  B = 2;
  L = 3;
  R = 4;
  TL = 5;
  TR = 6;
  BL = 7;
  BR = 8;
  // Also CL or ML for centre (mid-line) left, and CR or MR on right. These
  // would align with, say the centre of "+" and "=".
}

enum LayoutDirection {
  DIRECTION_AUTO = 0;
  N = 1;
  S = 2;
  E = 3;
  W = 4;
  NW = 5;
  NE = 6;
  SW = 7;
  SE = 8;
}

enum LayoutTransform {
  DIAGONALLY = 0;  // This is really the auto option, using alpha and beta.
  SQUARE_UP = 1;
}

enum ShowHide {
  SHOW_HIDE_AUTO = 0;  // Show imputed source, hide imputed sink.
  SHOW = 1;
  GHOST = 2;
  WAYPOINT = 3;
  HIDE = 4;
}

// Next ID to use: 10.
message Node {
  optional int32 prime_rank = 1;
  optional int32 obverse_rank = 2;
  optional string label_text =
      3;  // Empty will be overridden with prominent message.
  optional LabelAnchor anchor = 4;
  optional LayoutDirection compass = 5;
  optional double node_radius =
      6;  // Zero will be overridden with program default.
  optional double label_radius =
      7;  // Zero will be overridden with program default.
  optional ShowHide display = 8;
  // Late in layout process, adjust distance from average centres of parents.
  optional double distance = 9;
}

enum ArrowDirection {
  ARROW_AUTO = 0;
  ARROW_FORWARD = 1;
  ARROW_REVERSE = 2;
  ARROW_NONE = 3;
  ARROW_BIDRECTIONAL = 4;
}

message Edge {
  optional int32 parent = 1;  // Prime rank.
  optional int32 child = 2;   // Prime rank.
  optional ArrowDirection arrow = 3;
  optional ShowHide display = 4;
}

// Next ID to use: 11.
message Layout {
  optional LayoutDirection direction = 1;
  // The base grid size is given by the separation of nodes, measured in points.
  optional double sep_points =
      2;  // Zero will be overridden with program default.
  // The source and sink displays are applied iff imputed.
  optional ShowHide source_display = 3;
  optional ShowHide sink_display = 4;
  optional double stretch_alpha = 5 [default = 1.0];
  optional double stretch_beta = 6;
  optional LayoutTransform base_transform = 7;
  optional double base_margin = 8;
  optional double octant_rotation = 9;  // Additional rotation in octants.
  optional double grid_thickness = 10;
}

// Next ID to use: 6.
message ZebraixGraph {
  optional Node base_node = 1;
  optional Edge base_edge = 2;

  repeated Node nodes = 3;
  repeated Edge edges = 4;

  optional Layout layout = 5;
}
